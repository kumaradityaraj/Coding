class Solution {
    public static List<List<Integer>> fourSum(int[] nums, int target) {
        List<List<Integer>> res = new ArrayList<>();
        int n = nums.length;
        if(n<4){
            return res;
        }
        Arrays.sort(nums);
        for(int i=0; i<=n-4; i++){
            if(i != 0 && nums[i] == nums[i-1]){
                continue;
            }
            int val1 = nums[i];
            List<List<Integer>> subRes = threeSum(nums, target-val1, i+1);
            
            for(List<Integer> list : subRes){
                list.add(val1);
                res.add(list);
            }
        }
        return res;
    }
    
    public static List<List<Integer>> threeSum(int[] arr, int target, int si){
        List<List<Integer>> res = new ArrayList<>();
        int n = arr.length;
        if(n-si<3){
            return res;
        }
        for(int i = si; i<=n-3; i++){
            if(i!= si && arr[i] == arr[i-1]) continue;
            int val1 = arr[i];
            int targ = target - val1;
            List<List<Integer>> subRes = twoSum(arr, i+1, n-1, targ);
            for(List<Integer> list : subRes){
                list.add(val1);
                res.add(list);
            }
        }
        return res;
    }
    
    public static List<List<Integer>> twoSum (int[] arr, int si, int ei, int target){
        int left = si;
        int right = ei;
        List<List<Integer>> res = new ArrayList<>();
        while(left<right){
            if(left != si && arr[left] == arr[left - 1]){
                left++;
                continue;
            }
            int sum = arr[left] + arr[right];
            if(sum == target){
                List<Integer> subres = new ArrayList<>();
                subres.add(arr[left]);
                subres.add(arr[right]);
                res.add(subres);
                left++;
                right--;
                
            }
            else if(sum>target){
                right--;
            }
            else{
                left++;
            }
        }
        return res;
    }
}
